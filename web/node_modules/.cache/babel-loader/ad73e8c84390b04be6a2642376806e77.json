{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projetos\\\\Spital\\\\web\\\\src\\\\pages\\\\RecoverPassword\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { IconButton, TextField } from \"@material-ui/core\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { useModal } from \"../../context/ModalProvider\";\nimport api from \"../../services/api\";\nimport validateNewPassword from \"../../utils/validateNewPassword\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RecoverPassword() {\n  _s();\n\n  const [showPassword, setShowPassword] = useState(false);\n  let {\n    token\n  } = useParams();\n  const {\n    spinner\n  } = useModal();\n  const [isValid, setIsValid] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [newPassword, setNewPassword] = useState({\n    password: \"\",\n    confirmPassword: \"\"\n  });\n  const [errors, setErrors] = useState(validateNewPassword(newPassword));\n  useEffect(() => {\n    setErrors(validateNewPassword(newPassword));\n  }, [newPassword]);\n\n  function validate() {\n    setErrors(validateNewPassword(newPassword));\n  }\n\n  function handleShowPassword() {\n    setShowPassword(!showPassword);\n  }\n\n  const history = useHistory();\n\n  if (!token || isValid !== null && !isValid) {\n    spinner.close();\n    history.replace(\"/\");\n  }\n\n  const verifyToken = useCallback(async () => {\n    spinner.open();\n    let response = await api.get(`/users/recover/${token}`);\n\n    if (response.status === 202) {\n      setIsValid(true);\n    }\n\n    setIsLoading(false);\n    spinner.close();\n  }, [setIsValid, token]);\n  useEffect(() => {\n    verifyToken();\n  }, [verifyToken]);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    spinner.open();\n\n    if (newPassword.password !== newPassword.confirmPassword) {\n      spinner.close();\n      return;\n    }\n\n    let response = await api.put(`/users/recover/${token}`, {\n      password: newPassword.password\n    });\n\n    if (response.status === 200) {\n      console.log(\"Senha Mudada\");\n      history.replace(\"/\");\n    }\n\n    spinner.close();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form-container\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Seu e-mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => {\n          handleShowPassword();\n        },\n        className: \"show-password-button\",\n        color: \"primary\",\n        children: showPassword ? \"Esconder senha\" : \"Mostrar senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      type: showPassword ? \"text\" : \"password\",\n      value: newPassword.password,\n      name: \"password\",\n      label: /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: \"1.5rem\"\n        },\n        children: \"Nova senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 16\n      }, this),\n      variant: \"outlined\",\n      fullWidth: true,\n      onChange: e => {\n        setNewPassword({ ...newPassword,\n          password: e.target.value\n        });\n        validate();\n      },\n      autoComplete: \"off\",\n      required: true,\n      error: errors.password ? true : false,\n      helperText: /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: \"1.5rem\"\n        },\n        children: errors.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      type: showPassword ? \"text\" : \"password\",\n      value: newPassword.confirmPassword,\n      style: {\n        marginTop: \"1rem\"\n      },\n      name: \"confirm_password\",\n      label: /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: \"1.5rem\"\n        },\n        children: \"Confirmar nova senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 16\n      }, this),\n      variant: \"outlined\",\n      fullWidth: true,\n      onChange: e => {\n        setNewPassword({ ...newPassword,\n          confirmPassword: e.target.value\n        });\n        validate();\n      },\n      autoComplete: \"off\",\n      required: true,\n      error: errors.confirmPassword ? true : false,\n      helperText: /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontSize: \"1.5rem\"\n        },\n        children: errors.confirmPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"recover-password-button\",\n      children: \"Alterar senha\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RecoverPassword, \"jBRYIDC5bH+XfXtxd5rCgRzLpGU=\", false, function () {\n  return [useParams, useModal, useHistory];\n});\n\n_c = RecoverPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecoverPassword\");","map":{"version":3,"sources":["C:/Projetos/Spital/web/src/pages/RecoverPassword/index.tsx"],"names":["IconButton","TextField","React","useCallback","useEffect","useState","useHistory","useParams","useModal","api","validateNewPassword","RecoverPassword","showPassword","setShowPassword","token","spinner","isValid","setIsValid","isLoading","setIsLoading","newPassword","setNewPassword","password","confirmPassword","errors","setErrors","validate","handleShowPassword","history","close","replace","verifyToken","open","response","get","status","handleSubmit","e","preventDefault","put","console","log","fontSize","target","value","marginTop"],"mappings":"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","sourcesContent":["import { IconButton, TextField } from \"@material-ui/core\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { useModal } from \"../../context/ModalProvider\";\r\nimport api from \"../../services/api\";\r\nimport validateNewPassword from \"../../utils/validateNewPassword\";\r\nimport \"./styles.css\";\r\n\r\ninterface RecoverPasswordParams {\r\n  token?: string;\r\n}\r\n\r\nexport default function RecoverPassword() {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  let { token } = useParams<RecoverPasswordParams>();\r\n  const { spinner } = useModal();\r\n  const [isValid, setIsValid] = useState<boolean | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [newPassword, setNewPassword] = useState({\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n  const [errors, setErrors] = useState(validateNewPassword(newPassword));\r\n\r\n  useEffect(() => {\r\n    setErrors(validateNewPassword(newPassword));\r\n  }, [newPassword]);\r\n\r\n  function validate() {\r\n    setErrors(validateNewPassword(newPassword));\r\n  }\r\n\r\n  function handleShowPassword() {\r\n    setShowPassword(!showPassword);\r\n  }\r\n\r\n  const history = useHistory();\r\n\r\n  if (!token || (isValid !== null && !isValid)) {\r\n    spinner.close();\r\n    history.replace(\"/\");\r\n  }\r\n\r\n  const verifyToken = useCallback(async () => {\r\n    spinner.open();\r\n    let response = await api.get(`/users/recover/${token}`);\r\n\r\n    if (response.status === 202) {\r\n      setIsValid(true);\r\n    }\r\n\r\n    setIsLoading(false);\r\n    spinner.close();\r\n  }, [setIsValid, token]);\r\n\r\n  useEffect(() => {\r\n    verifyToken();\r\n  }, [verifyToken]);\r\n\r\n  if (isLoading) {\r\n    return <div></div>;\r\n  }\r\n\r\n  async function handleSubmit(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    spinner.open();\r\n    if (newPassword.password !== newPassword.confirmPassword) {\r\n      spinner.close();\r\n      return;\r\n    }\r\n\r\n    let response = await api.put(`/users/recover/${token}`, {\r\n      password: newPassword.password,\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      console.log(\"Senha Mudada\");\r\n      history.replace(\"/\");\r\n    }\r\n\r\n    spinner.close();\r\n  }\r\n\r\n  return (\r\n    <form className=\"form-container\" onSubmit={handleSubmit}>\r\n      <div id=\"flex\">\r\n        <h2>Seu e-mail</h2>\r\n        <IconButton\r\n          onClick={() => {\r\n            handleShowPassword();\r\n          }}\r\n          className=\"show-password-button\"\r\n          color=\"primary\"\r\n        >\r\n          {showPassword ? \"Esconder senha\" : \"Mostrar senha\"}\r\n        </IconButton>\r\n      </div>\r\n\r\n      <div className=\"line\"></div>\r\n      <TextField\r\n        type={showPassword ? \"text\" : \"password\"}\r\n        value={newPassword.password}\r\n        name=\"password\"\r\n        label={<span style={{ fontSize: \"1.5rem\" }}>Nova senha</span>}\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        onChange={(e) => {\r\n          setNewPassword({ ...newPassword, password: e.target.value });\r\n          validate();\r\n        }}\r\n        autoComplete=\"off\"\r\n        required\r\n        error={errors.password ? true : false}\r\n        helperText={\r\n          <span style={{ fontSize: \"1.5rem\" }}>{errors.password}</span>\r\n        }\r\n      />\r\n      <TextField\r\n        type={showPassword ? \"text\" : \"password\"}\r\n        value={newPassword.confirmPassword}\r\n        style={{ marginTop: \"1rem\" }}\r\n        name=\"confirm_password\"\r\n        label={<span style={{ fontSize: \"1.5rem\" }}>Confirmar nova senha</span>}\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        onChange={(e) => {\r\n          setNewPassword({ ...newPassword, confirmPassword: e.target.value });\r\n          validate();\r\n        }}\r\n        autoComplete=\"off\"\r\n        required\r\n        error={errors.confirmPassword ? true : false}\r\n        helperText={\r\n          <span style={{ fontSize: \"1.5rem\" }}>{errors.confirmPassword}</span>\r\n        }\r\n      />\r\n      <button className=\"recover-password-button\">Alterar senha</button>\r\n    </form>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}