{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projetos\\\\Spital\\\\web\\\\src\\\\components\\\\MedicProfilePages\\\\Schedule\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useParams } from \"react-router-dom\";\nimport \"./styles.css\";\nimport { useEffect, useState } from \"react\";\nimport api from \"../../../services/api\";\nimport SubHeaderPlatform from \"../../../components/SubHeaderPlatform\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport { IoChevronBackOutline, IoChevronForwardOutline, IoArrowUndoSharp, IoArrowRedoSharp } from \"react-icons/io5\";\nimport DaySchedule from \"../../../components/DaySchedule\";\nimport AppointmentType from \"../../../components/AppointmentType\";\nimport GreenButton from \"../../../components/GreenButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ScheduleMedicProfile = ({\n  nextPage,\n  previousPage\n}) => {\n  _s();\n\n  const [consultTypes, setConsultTypes] = useState([]);\n  const [date, setDate] = useState(new Date());\n  const [medic, setMedic] = useState(null);\n  const [user, setUser] = useState(null);\n\n  function calculateMonth(month) {\n    switch (month) {\n      case \"Jan\":\n        return 1;\n\n      case \"Feb\":\n        return 2;\n\n      case \"Mar\":\n        return 3;\n\n      case \"Apr\":\n        return 4;\n\n      case \"May\":\n        return 5;\n\n      case \"Jun\":\n        return 6;\n\n      case \"Jul\":\n        return 7;\n\n      case \"Aug\":\n        return 8;\n\n      case \"Sep\":\n        return 9;\n\n      case \"Oct\":\n        return 10;\n\n      case \"Nov\":\n        return 11;\n\n      case \"Dec\":\n        return 12;\n\n      default:\n        return 0;\n    }\n  }\n\n  const dateString = date.toString();\n  const [week_day, month, month_day, year] = dateString.split(\" \");\n  const numberMonth = calculateMonth(month);\n  const totalDate = Number(month_day) + numberMonth * Number(year);\n  const today = new Date();\n  const todayString = today.toString();\n  const [today_week_day, today_month, today_month_day, today_year] = todayString.split(\" \");\n  const todayNumberMonth = calculateMonth(today_month);\n  const today_totalDate = Number(today_month_day) + todayNumberMonth * Number(today_year);\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    api.get(`consult-type?medicID=${id}`).then(response => {\n      setConsultTypes(response.data);\n    });\n  }, [id]);\n  useEffect(() => {\n    api.get(`medics?userID=${id}`).then(response => {\n      setMedic(response.data);\n    });\n  }, []);\n  useEffect(() => {\n    api.get(`users?id=${id}`).then(response => {\n      setUser(response.data);\n    });\n  }, []);\n\n  function transformMonth() {\n    switch (month) {\n      case \"Jan\":\n        return 1;\n\n      case \"Feb\":\n        return 2;\n\n      case \"Mar\":\n        return 3;\n\n      case \"Apr\":\n        return 4;\n\n      case \"May\":\n        return 5;\n\n      case \"Jun\":\n        return 6;\n\n      case \"Jul\":\n        return 7;\n\n      case \"Aug\":\n        return 8;\n\n      case \"Sep\":\n        return 9;\n\n      case \"Oct\":\n        return 10;\n\n      case \"Nov\":\n        return 11;\n\n      case \"Dec\":\n        return 12;\n\n      default:\n        return 0;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"client-platform\",\n    children: [/*#__PURE__*/_jsxDEV(SubHeaderPlatform, {\n      title: `Agendar consulta com Dr(a). ${user === null || user === void 0 ? void 0 : user.firstName}`,\n      returnFunction: () => previousPage()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Calendar, {\n        prevLabel: /*#__PURE__*/_jsxDEV(IoChevronBackOutline, {\n          color: \"#07B3D6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 22\n        }, this),\n        nextLabel: /*#__PURE__*/_jsxDEV(IoChevronForwardOutline, {\n          color: \"#07B3D6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 22\n        }, this),\n        prev2Label: /*#__PURE__*/_jsxDEV(IoArrowUndoSharp, {\n          color: \"#07B3D6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 23\n        }, this),\n        next2Label: /*#__PURE__*/_jsxDEV(IoArrowRedoSharp, {\n          color: \"#07B3D6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 23\n        }, this),\n        className: \"big-calendar\",\n        value: date,\n        onChange: e => {\n          setDate(e);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), totalDate < today_totalDate ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          padding: \"2rem\",\n          backgroundColor: \"#fff\",\n          fontSize: \"1.5rem\",\n          marginTop: \"2rem\",\n          borderRadius: \"4rem\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          fontWeight: \"bold\"\n        },\n        children: \"Voc\\xEA por acaso possui uma m\\xE1quina de tempo?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(DaySchedule, {\n        getMonth: transformMonth,\n        year: year,\n        monthDay: month_day\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AppointmentType, {\n        consultTypes: consultTypes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GreenButton, {\n        nextPage: nextPage,\n        getMonth: transformMonth,\n        year: year,\n        monthDay: month_day,\n        label: \"Ir para o pagamento\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ScheduleMedicProfile, \"NfOSyBjP8UtDP+coVPXHK401N8g=\", false, function () {\n  return [useParams];\n});\n\n_c = ScheduleMedicProfile;\nexport default ScheduleMedicProfile;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScheduleMedicProfile\");","map":{"version":3,"sources":["C:/Projetos/Spital/web/src/components/MedicProfilePages/Schedule/index.tsx"],"names":["useParams","useEffect","useState","api","SubHeaderPlatform","Calendar","IoChevronBackOutline","IoChevronForwardOutline","IoArrowUndoSharp","IoArrowRedoSharp","DaySchedule","AppointmentType","GreenButton","ScheduleMedicProfile","nextPage","previousPage","consultTypes","setConsultTypes","date","setDate","Date","medic","setMedic","user","setUser","calculateMonth","month","dateString","toString","week_day","month_day","year","split","numberMonth","totalDate","Number","today","todayString","today_week_day","today_month","today_month_day","today_year","todayNumberMonth","today_totalDate","id","get","then","response","data","transformMonth","firstName","e","width","padding","backgroundColor","fontSize","marginTop","borderRadius","display","alignItems","justifyContent","fontWeight"],"mappings":"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","sourcesContent":["import { useParams } from \"react-router-dom\";\r\nimport \"./styles.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport api from \"../../../services/api\";\r\nimport SubHeaderPlatform from \"../../../components/SubHeaderPlatform\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  ParamTypes,\r\n  MedicProps,\r\n  UserProps,\r\n} from \"../../../components/MedicProfilePages/Main\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport {\r\n  IoChevronBackOutline,\r\n  IoChevronForwardOutline,\r\n  IoArrowUndoSharp,\r\n  IoArrowRedoSharp,\r\n} from \"react-icons/io5\";\r\nimport DaySchedule from \"../../../components/DaySchedule\";\r\nimport AppointmentType from \"../../../components/AppointmentType\";\r\nimport GreenButton from \"../../../components/GreenButton\";\r\nimport ShareAppointmentFormProvider from \"../../../context/ShareAppointmentFormProvider\";\r\nimport { NamesProps } from \"../../Form/Steps/Names\";\r\n\r\ninterface ConsultTypeProps {\r\n  type: string;\r\n  price: string;\r\n}\r\n\r\nconst ScheduleMedicProfile = ({ nextPage, previousPage }: NamesProps) => {\r\n  const [consultTypes, setConsultTypes] = useState<ConsultTypeProps[]>([]);\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  const [medic, setMedic] = useState<MedicProps | null>(null);\r\n  const [user, setUser] = useState<UserProps | null>(null);\r\n\r\n  function calculateMonth(month: any) {\r\n    switch (month) {\r\n      case \"Jan\":\r\n        return 1;\r\n      case \"Feb\":\r\n        return 2;\r\n      case \"Mar\":\r\n        return 3;\r\n      case \"Apr\":\r\n        return 4;\r\n      case \"May\":\r\n        return 5;\r\n      case \"Jun\":\r\n        return 6;\r\n      case \"Jul\":\r\n        return 7;\r\n      case \"Aug\":\r\n        return 8;\r\n      case \"Sep\":\r\n        return 9;\r\n      case \"Oct\":\r\n        return 10;\r\n      case \"Nov\":\r\n        return 11;\r\n      case \"Dec\":\r\n        return 12;\r\n\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  const dateString = date.toString();\r\n\r\n  const [week_day, month, month_day, year] = dateString.split(\" \");\r\n  const numberMonth = calculateMonth(month);\r\n  const totalDate = Number(month_day) + numberMonth * Number(year);\r\n\r\n  const today = new Date();\r\n  const todayString = today.toString();\r\n  const [today_week_day, today_month, today_month_day, today_year] =\r\n    todayString.split(\" \");\r\n\r\n  const todayNumberMonth = calculateMonth(today_month);\r\n  const today_totalDate =\r\n    Number(today_month_day) + todayNumberMonth * Number(today_year);\r\n\r\n  const { id } = useParams<ParamTypes>();\r\n\r\n  useEffect(() => {\r\n    api.get(`consult-type?medicID=${id}`).then((response: any) => {\r\n      setConsultTypes(response.data);\r\n    });\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    api.get(`medics?userID=${id}`).then((response: any) => {\r\n      setMedic(response.data);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    api.get(`users?id=${id}`).then((response: any) => {\r\n      setUser(response.data);\r\n    });\r\n  }, []);\r\n\r\n  function transformMonth() {\r\n    switch (month) {\r\n      case \"Jan\":\r\n        return 1;\r\n      case \"Feb\":\r\n        return 2;\r\n      case \"Mar\":\r\n        return 3;\r\n      case \"Apr\":\r\n        return 4;\r\n      case \"May\":\r\n        return 5;\r\n      case \"Jun\":\r\n        return 6;\r\n      case \"Jul\":\r\n        return 7;\r\n      case \"Aug\":\r\n        return 8;\r\n      case \"Sep\":\r\n        return 9;\r\n      case \"Oct\":\r\n        return 10;\r\n      case \"Nov\":\r\n        return 11;\r\n      case \"Dec\":\r\n        return 12;\r\n\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"client-platform\">\r\n      <SubHeaderPlatform\r\n        title={`Agendar consulta com Dr(a). ${user?.firstName}`}\r\n        returnFunction={() => previousPage()}\r\n      />\r\n      <div className=\"container\">\r\n        <Calendar\r\n          prevLabel={<IoChevronBackOutline color=\"#07B3D6\" />}\r\n          nextLabel={<IoChevronForwardOutline color=\"#07B3D6\" />}\r\n          prev2Label={<IoArrowUndoSharp color=\"#07B3D6\" />}\r\n          next2Label={<IoArrowRedoSharp color=\"#07B3D6\" />}\r\n          className=\"big-calendar\"\r\n          value={date}\r\n          onChange={(e: any) => {\r\n            setDate(e);\r\n          }}\r\n        />\r\n\r\n        {totalDate < today_totalDate ? (\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              padding: \"2rem\",\r\n              backgroundColor: \"#fff\",\r\n              fontSize: \"1.5rem\",\r\n              marginTop: \"2rem\",\r\n              borderRadius: \"4rem\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n          >\r\n            Você por acaso possui uma máquina de tempo?\r\n          </div>\r\n        ) : (\r\n          <DaySchedule\r\n            getMonth={transformMonth}\r\n            year={year}\r\n            monthDay={month_day}\r\n          />\r\n        )}\r\n\r\n        <AppointmentType consultTypes={consultTypes} />\r\n\r\n        <GreenButton\r\n          nextPage={nextPage}\r\n          getMonth={transformMonth}\r\n          year={year}\r\n          monthDay={month_day}\r\n          label=\"Ir para o pagamento\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScheduleMedicProfile;\r\n"]},"metadata":{},"sourceType":"module"}