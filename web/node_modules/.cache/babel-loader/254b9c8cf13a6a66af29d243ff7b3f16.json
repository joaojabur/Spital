{"ast":null,"code":"import validateCPF from \"./validateCpf\";\nexport default function validateMedicInfo(credentials) {\n  let errors = {};\n\n  if (credentials !== null) {\n    var _credentials$firstNam, _credentials$firstNam2, _credentials$lastName, _credentials$lastName2, _credentials$email$le, _credentials$email, _credentials$email2, _credentials$password, _credentials$password2, _credentials$password3, _credentials$confirmP, _credentials$confirmP2, _credentials$phoneNum, _credentials$phoneNum2, _phoneNumbers$length, _credentials$area$len, _credentials$area, _credentials$graduati, _credentials$graduati2, _credentials$graduati3, _credentials$masterDe, _credentials$masterDe2, _credentials$masterDe3, _credentials$masterDe4, _credentials$doctorat, _credentials$doctorat2, _credentials$doctorat3, _credentials$doctorat4, _credentials$crm$leng, _credentials$crm, _credentials$cpf$repl, _credentials$cpf, _cpfNumbers$length, _credentials$rg$repla, _credentials$rg, _rgNumbers$length, _credentials$birthDat, _credentials$birthDat2;\n\n    if ((_credentials$firstNam = !(credentials === null || credentials === void 0 ? void 0 : (_credentials$firstNam2 = credentials.firstName) === null || _credentials$firstNam2 === void 0 ? void 0 : _credentials$firstNam2.length)) !== null && _credentials$firstNam !== void 0 ? _credentials$firstNam : 0) {\n      errors.firstName = \"Campo de nome é necessário\";\n    }\n\n    if ((_credentials$lastName = !(credentials === null || credentials === void 0 ? void 0 : (_credentials$lastName2 = credentials.lastName) === null || _credentials$lastName2 === void 0 ? void 0 : _credentials$lastName2.length)) !== null && _credentials$lastName !== void 0 ? _credentials$lastName : 0) {\n      errors.lastName = \"Campo de sobrenome é necessário\";\n    }\n\n    if ((_credentials$email$le = !(credentials === null || credentials === void 0 ? void 0 : (_credentials$email = credentials.email) === null || _credentials$email === void 0 ? void 0 : _credentials$email.length)) !== null && _credentials$email$le !== void 0 ? _credentials$email$le : 0) {\n      errors.email = \"Campo de e-mail é necessário\";\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test((_credentials$email2 = credentials === null || credentials === void 0 ? void 0 : credentials.email) !== null && _credentials$email2 !== void 0 ? _credentials$email2 : \"\")) {\n      errors.email = \"E-mail inválido\";\n    }\n\n    if ((_credentials$password = !(credentials === null || credentials === void 0 ? void 0 : (_credentials$password2 = credentials.password) === null || _credentials$password2 === void 0 ? void 0 : _credentials$password2.length)) !== null && _credentials$password !== void 0 ? _credentials$password : 0) {\n      errors.password = \"Campo de senha é necessário\";\n    } else if ((credentials === null || credentials === void 0 ? void 0 : (_credentials$password3 = credentials.password) === null || _credentials$password3 === void 0 ? void 0 : _credentials$password3.length) < 6) {\n      errors.password = \"A senha precisa de 6 ou mais caracteres\";\n    }\n\n    if ((_credentials$confirmP = !(credentials === null || credentials === void 0 ? void 0 : (_credentials$confirmP2 = credentials.confirmPassword) === null || _credentials$confirmP2 === void 0 ? void 0 : _credentials$confirmP2.length)) !== null && _credentials$confirmP !== void 0 ? _credentials$confirmP : 0) {\n      errors.confirmPassword = \"Campo de confirmação de senha é necessário\";\n    } else if ((credentials === null || credentials === void 0 ? void 0 : credentials.confirmPassword) !== (credentials === null || credentials === void 0 ? void 0 : credentials.password)) {\n      errors.confirmPassword = \"As senhas não combinam\";\n    }\n\n    const phoneNumbers = (_credentials$phoneNum = credentials === null || credentials === void 0 ? void 0 : (_credentials$phoneNum2 = credentials.phoneNumber) === null || _credentials$phoneNum2 === void 0 ? void 0 : _credentials$phoneNum2.replace(/[-.() ]/g, \"\")) !== null && _credentials$phoneNum !== void 0 ? _credentials$phoneNum : \"0\";\n\n    if (isNaN(parseInt(phoneNumbers))) {\n      errors.phoneNumber = \"Número de telefone inválido\";\n    } else if (phoneNumbers.length !== 11) {\n      errors.phoneNumber = \"Número de telefone inválido\";\n    } else if ((_phoneNumbers$length = !phoneNumbers.length) !== null && _phoneNumbers$length !== void 0 ? _phoneNumbers$length : 0) {\n      errors.phoneNumber = \"Campo de telefone é necessário\";\n    }\n\n    if ((_credentials$area$len = !(credentials === null || credentials === void 0 ? void 0 : (_credentials$area = credentials.area) === null || _credentials$area === void 0 ? void 0 : _credentials$area.length)) !== null && _credentials$area$len !== void 0 ? _credentials$area$len : 0) {\n      errors.area = \"Campo de área é necessário\";\n    }\n\n    if ((_credentials$graduati = !(credentials === null || credentials === void 0 ? void 0 : (_credentials$graduati2 = credentials.graduation) === null || _credentials$graduati2 === void 0 ? void 0 : _credentials$graduati2.length)) !== null && _credentials$graduati !== void 0 ? _credentials$graduati : 0) {\n      errors.graduation = \"Campo de graduação é necessário\";\n    } else if ((credentials === null || credentials === void 0 ? void 0 : (_credentials$graduati3 = credentials.graduation) === null || _credentials$graduati3 === void 0 ? void 0 : _credentials$graduati3.length) < 4) {\n      errors.graduation = \"Campo de graduação com poucos caracteres\";\n    }\n\n    if (((_credentials$masterDe = credentials === null || credentials === void 0 ? void 0 : (_credentials$masterDe2 = credentials.masterDegree) === null || _credentials$masterDe2 === void 0 ? void 0 : _credentials$masterDe2.length) !== null && _credentials$masterDe !== void 0 ? _credentials$masterDe : 0) >= 1 && ((_credentials$masterDe3 = credentials === null || credentials === void 0 ? void 0 : (_credentials$masterDe4 = credentials.masterDegree) === null || _credentials$masterDe4 === void 0 ? void 0 : _credentials$masterDe4.length) !== null && _credentials$masterDe3 !== void 0 ? _credentials$masterDe3 : 0) <= 4) {\n      errors.masterDegree = \"Campo de mestrado com poucos caracteres\";\n    }\n\n    if (((_credentials$doctorat = credentials === null || credentials === void 0 ? void 0 : (_credentials$doctorat2 = credentials.doctorateDegree) === null || _credentials$doctorat2 === void 0 ? void 0 : _credentials$doctorat2.length) !== null && _credentials$doctorat !== void 0 ? _credentials$doctorat : 0) >= 1 && ((_credentials$doctorat3 = credentials === null || credentials === void 0 ? void 0 : (_credentials$doctorat4 = credentials.doctorateDegree) === null || _credentials$doctorat4 === void 0 ? void 0 : _credentials$doctorat4.length) !== null && _credentials$doctorat3 !== void 0 ? _credentials$doctorat3 : 0) <= 4) {\n      errors.doctorateDegree = \"Campo de doutorado com poucos caracteres\";\n    }\n\n    if ((_credentials$crm$leng = !(credentials === null || credentials === void 0 ? void 0 : (_credentials$crm = credentials.crm) === null || _credentials$crm === void 0 ? void 0 : _credentials$crm.length)) !== null && _credentials$crm$leng !== void 0 ? _credentials$crm$leng : 0) {\n      errors.crm = \"Campo de CRM é necessário\";\n    }\n\n    const cpfNumbers = (_credentials$cpf$repl = credentials === null || credentials === void 0 ? void 0 : (_credentials$cpf = credentials.cpf) === null || _credentials$cpf === void 0 ? void 0 : _credentials$cpf.replace(/[-. ]/g, \"\")) !== null && _credentials$cpf$repl !== void 0 ? _credentials$cpf$repl : \"0\";\n\n    if ((_cpfNumbers$length = !(cpfNumbers === null || cpfNumbers === void 0 ? void 0 : cpfNumbers.length)) !== null && _cpfNumbers$length !== void 0 ? _cpfNumbers$length : 0) {\n      errors.cpf = \"Campo de CPF é necessário\";\n    } else if (isNaN(parseInt(cpfNumbers))) {\n      errors.rg = \"Caracteres não aceitos\";\n    } else if (validateCPF({\n      cpf: cpfNumbers\n    })) {\n      errors.cpf = \"CPF inválido\";\n    }\n\n    const rgNumbers = (_credentials$rg$repla = credentials === null || credentials === void 0 ? void 0 : (_credentials$rg = credentials.rg) === null || _credentials$rg === void 0 ? void 0 : _credentials$rg.replace(/[-. ]/g, \"\")) !== null && _credentials$rg$repla !== void 0 ? _credentials$rg$repla : \"0\";\n\n    if ((_rgNumbers$length = !(rgNumbers === null || rgNumbers === void 0 ? void 0 : rgNumbers.length)) !== null && _rgNumbers$length !== void 0 ? _rgNumbers$length : 0) {\n      errors.rg = \"Campo de RG é necessário\";\n    } else if ((rgNumbers === null || rgNumbers === void 0 ? void 0 : rgNumbers.length) !== 9) {\n      errors.rg = \"RG inválido\";\n    } else if (isNaN(parseInt(rgNumbers))) {\n      errors.rg = \"Caracteres não aceitos\";\n    }\n\n    if ((_credentials$birthDat = !(credentials === null || credentials === void 0 ? void 0 : (_credentials$birthDat2 = credentials.birthDate) === null || _credentials$birthDat2 === void 0 ? void 0 : _credentials$birthDat2.length)) !== null && _credentials$birthDat !== void 0 ? _credentials$birthDat : 0) {\n      errors.birthDate = \"Campo de data de nascimento é necessário\";\n    }\n  }\n\n  return errors;\n}","map":{"version":3,"sources":["C:/Projetos/Spital/web/src/utils/validateMedicInfo.ts"],"names":["validateCPF","validateMedicInfo","credentials","errors","firstName","length","lastName","email","test","password","confirmPassword","phoneNumbers","phoneNumber","replace","isNaN","parseInt","area","graduation","masterDegree","doctorateDegree","crm","cpfNumbers","cpf","rg","rgNumbers","birthDate"],"mappings":"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","sourcesContent":["import validateCPF from \"./validateCpf\";\r\n\r\ninterface Medic {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n  phoneNumber: string;\r\n  area: string;\r\n  graduation: string;\r\n  masterDegree: string;\r\n  doctorateDegree: string;\r\n  cpf: string;\r\n  rg: string;\r\n  birthDate: string;\r\n  crm: string;\r\n  schedule: Array<Schedule>;\r\n}\r\n\r\ninterface Schedule {\r\n  week_day: number;\r\n  from: string;\r\n  to: string;\r\n}\r\n\r\nexport default function validateMedicInfo(credentials?: Medic) {\r\n  let errors = {} as Medic;\r\n\r\n  if (credentials !== null) {\r\n    if (!credentials?.firstName?.length ?? 0) {\r\n      errors.firstName = \"Campo de nome é necessário\";\r\n    }\r\n\r\n    if (!credentials?.lastName?.length ?? 0) {\r\n      errors.lastName = \"Campo de sobrenome é necessário\";\r\n    }\r\n\r\n    if (!credentials?.email?.length ?? 0) {\r\n      errors.email = \"Campo de e-mail é necessário\";\r\n    } else if (\r\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(credentials?.email ?? \"\")\r\n    ) {\r\n      errors.email = \"E-mail inválido\";\r\n    }\r\n\r\n    if (!credentials?.password?.length ?? 0) {\r\n      errors.password = \"Campo de senha é necessário\";\r\n    } else if (credentials?.password?.length < 6) {\r\n      errors.password = \"A senha precisa de 6 ou mais caracteres\";\r\n    }\r\n\r\n    if (!credentials?.confirmPassword?.length ?? 0) {\r\n      errors.confirmPassword = \"Campo de confirmação de senha é necessário\";\r\n    } else if (credentials?.confirmPassword !== credentials?.password) {\r\n      errors.confirmPassword = \"As senhas não combinam\";\r\n    }\r\n\r\n    const phoneNumbers =\r\n      credentials?.phoneNumber?.replace(/[-.() ]/g, \"\") ?? \"0\";\r\n\r\n    if (isNaN(parseInt(phoneNumbers))) {\r\n      errors.phoneNumber = \"Número de telefone inválido\";\r\n    } else if (phoneNumbers.length !== 11) {\r\n      errors.phoneNumber = \"Número de telefone inválido\";\r\n    } else if (!phoneNumbers.length ?? 0) {\r\n      errors.phoneNumber = \"Campo de telefone é necessário\";\r\n    }\r\n\r\n    if (!credentials?.area?.length ?? 0) {\r\n      errors.area = \"Campo de área é necessário\";\r\n    }\r\n\r\n    if (!credentials?.graduation?.length ?? 0) {\r\n      errors.graduation = \"Campo de graduação é necessário\";\r\n    } else if (credentials?.graduation?.length < 4) {\r\n      errors.graduation = \"Campo de graduação com poucos caracteres\";\r\n    }\r\n\r\n    if (\r\n      ((credentials?.masterDegree?.length ?? 0 )>= 1) &&\r\n      ((credentials?.masterDegree?.length ?? 0 )<= 4)\r\n    ) {\r\n      errors.masterDegree = \"Campo de mestrado com poucos caracteres\";\r\n    }\r\n\r\n    if (\r\n      ((credentials?.doctorateDegree?.length ?? 0 )>= 1) &&\r\n      ((credentials?.doctorateDegree?.length ?? 0 )<= 4)\r\n    ) {\r\n      errors.doctorateDegree = \"Campo de doutorado com poucos caracteres\";\r\n    }\r\n\r\n    if (!credentials?.crm?.length ?? 0) {\r\n      errors.crm = \"Campo de CRM é necessário\"\r\n    }\r\n\r\n    const cpfNumbers = credentials?.cpf?.replace(/[-. ]/g, \"\") ?? \"0\";\r\n\r\n    if (!cpfNumbers?.length ?? 0) {\r\n      errors.cpf = \"Campo de CPF é necessário\";\r\n    } else if (isNaN(parseInt(cpfNumbers))) {\r\n      errors.rg = \"Caracteres não aceitos\";\r\n    } else if (validateCPF({ cpf: cpfNumbers })) {\r\n      errors.cpf = \"CPF inválido\";\r\n    }\r\n    const rgNumbers = credentials?.rg?.replace(/[-. ]/g, \"\") ?? \"0\";\r\n\r\n    if (!rgNumbers?.length ?? 0) {\r\n      errors.rg = \"Campo de RG é necessário\";\r\n    } else if (rgNumbers?.length !== 9) {\r\n      errors.rg = \"RG inválido\";\r\n    } else if (isNaN(parseInt(rgNumbers))) {\r\n      errors.rg = \"Caracteres não aceitos\";\r\n    }\r\n\r\n    if (!credentials?.birthDate?.length ?? 0) {\r\n      errors.birthDate = \"Campo de data de nascimento é necessário\";\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}