{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projetos\\\\Spital\\\\web\\\\src\\\\context\\\\AuthProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, createContext, useContext } from \"react\";\nimport api from \"../services/api\";\nimport Cookies from \"js-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport default function AuthProvider({\n  children\n}) {\n  _s();\n\n  const [user, setUser] = useState(null);\n  const [userID, setUserID] = useState(null);\n  const [confirmed, setConfirmed] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  async function getUserData(id) {\n    let response = await api.get(`clients?id=${id}`);\n    setUser({ ...response.data\n    });\n    setLoading(false);\n  }\n\n  async function logout() {\n    Cookies.remove(\"access-token\");\n    window.location.reload();\n  }\n\n  async function login(email, password) {\n    let response;\n\n    try {\n      response = await api.post(\"/clients/login\", {\n        email: email,\n        password: password\n      });\n      let {\n        token,\n        id,\n        confirmed\n      } = response.data;\n\n      if (confirmed) {\n        Cookies.set(\"access-token\", token);\n        setUserID(id);\n        setConfirmed(confirmed);\n        getUserData(id);\n      } else {\n        throw new Error(\"Usuário não verificado\");\n      }\n\n      return response;\n    } catch (error) {\n      var _error$response$data, _error$response;\n\n      return (_error$response$data = error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) !== null && _error$response$data !== void 0 ? _error$response$data : {\n        error: error.message\n      };\n    }\n  }\n\n  async function loginWithToken() {\n    let response = await api.get(\"clients/auth\", {\n      headers: {\n        Authorization: Cookies.get(\"access-token\")\n      }\n    });\n    let {\n      auth,\n      userID,\n      confirmed\n    } = response.data;\n\n    if (auth) {\n      setUserID(userID);\n      setConfirmed(confirmed);\n      getUserData(userID);\n    } else {\n      setLoading(false);\n    }\n  }\n\n  async function signup(user) {\n    return await api.post(\"clients\", { ...user\n    });\n  }\n\n  useEffect(() => {\n    if (Cookies.get(\"access-token\")) {\n      loginWithToken();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  let value = {\n    user,\n    authenticated: user !== null,\n    signup,\n    login,\n    logout,\n    confirmed,\n    userID\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AuthProvider, \"yfWk6VYQjpZ5keqTbkB5xs/Eokc=\");\n\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n\n  return useContext(AuthContext);\n}\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Projetos/Spital/web/src/context/AuthProvider.tsx"],"names":["React","useState","useEffect","createContext","useContext","api","Cookies","AuthContext","AuthProvider","children","user","setUser","userID","setUserID","confirmed","setConfirmed","loading","setLoading","getUserData","id","response","get","data","logout","remove","window","location","reload","login","email","password","post","token","set","Error","error","message","loginWithToken","headers","Authorization","auth","signup","value","authenticated","useAuth"],"mappings":"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","sourcesContent":["import React, {\r\n  useState,\r\n  useEffect,\r\n  createContext,\r\n  useContext,\r\n} from \"react\";\r\nimport api from \"../services/api\";\r\nimport Cookies from \"js-cookie\";\r\n\r\ninterface User {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  phoneNumber: string;\r\n  image: string;\r\n  xp: number;\r\n}\r\n\r\ninterface AuthContextData {\r\n  user: User;\r\n  authenticated: boolean;\r\n  login: (email: string, password: string) => any;\r\n  signup: (user: User) => Promise<any>;\r\n  logout: () => void;\r\n  confirmed: boolean;\r\n  userID: number;\r\n}\r\n\r\ninterface AuthProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst AuthContext = createContext({} as AuthContextData);\r\n\r\nexport default function AuthProvider({ children }: AuthProviderProps) {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [userID, setUserID] = useState<number | null>(null);\r\n  const [confirmed, setConfirmed] = useState<boolean>(false);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  async function getUserData(id: number) {\r\n    let response = await api.get(`clients?id=${id}`);\r\n\r\n    setUser({\r\n      ...response.data,\r\n    });\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  async function logout() {\r\n    Cookies.remove(\"access-token\");\r\n    window.location.reload();\r\n  }\r\n\r\n  async function login(email: string, password: string) {\r\n    let response;\r\n    try {\r\n      response = await api.post(\"/clients/login\", {\r\n        email: email,\r\n        password: password,\r\n      });\r\n      let { token, id, confirmed } = response.data;\r\n\r\n      if (confirmed) {\r\n        Cookies.set(\"access-token\", token);\r\n        setUserID(id);\r\n\r\n        setConfirmed(confirmed);\r\n\r\n        getUserData(id);\r\n      } else {\r\n        throw new Error(\"Usuário não verificado\");\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      return error?.response?.data ?? { error: error.message };\r\n    }\r\n  }\r\n\r\n  async function loginWithToken() {\r\n    let response = await api.get(\"clients/auth\", {\r\n      headers: {\r\n        Authorization: Cookies.get(\"access-token\"),\r\n      },\r\n    });\r\n\r\n    let { auth, userID, confirmed } = response.data;\r\n\r\n    if (auth) {\r\n      setUserID(userID);\r\n      setConfirmed(confirmed);\r\n      getUserData(userID);\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  async function signup(user: User) {\r\n    return await api.post(\"clients\", {\r\n      ...user,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (Cookies.get(\"access-token\")) {\r\n      loginWithToken();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  let value = {\r\n    user,\r\n    authenticated: user !== null,\r\n    signup,\r\n    login,\r\n    logout,\r\n    confirmed,\r\n    userID,\r\n  } as AuthContextData;\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}