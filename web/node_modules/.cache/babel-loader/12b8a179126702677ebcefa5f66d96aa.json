{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projetos\\\\Spital\\\\web\\\\src\\\\components\\\\DaySchedule\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useShareAppointmentForm } from \"../../context/ShareAppointmentFormProvider\";\nimport api from \"../../services/api\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DaySchedule = ({\n  getMonth,\n  year,\n  monthDay\n}) => {\n  _s();\n\n  const {\n    appointmentData,\n    setAppointmentData\n  } = useShareAppointmentForm();\n  const [medicSchedule, setMedicSchedule] = useState(null);\n  const [appointments, setAppointments] = useState([]);\n  const {\n    id\n  } = useParams();\n  const month = getMonth();\n  const completeDate = `${month}/${monthDay}/${year}`;\n  const newCompleteDate = new Date(completeDate);\n  const newWeekDay = newCompleteDate.getDay();\n  useEffect(() => {\n    api.get(`appointments?medicID=${id}&date=${completeDate}`).then(response => {\n      setAppointments(response.data);\n    });\n    api.get(`medic-schedule?medicID=${id}&week_day=${newWeekDay}`).then(response => {\n      setMedicSchedule(response.data[0]);\n    });\n  }, [newWeekDay, completeDate, id]);\n  const numberFrom = Number(medicSchedule === null || medicSchedule === void 0 ? void 0 : medicSchedule.from);\n  const numberTo = Number(medicSchedule === null || medicSchedule === void 0 ? void 0 : medicSchedule.to);\n  const quantityOfTimes = (numberTo - numberFrom) / 30;\n  const quantityOfTimesArray = [];\n\n  for (let i = 0; i <= quantityOfTimes; i++) {\n    quantityOfTimesArray.push(i);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"day-schedule\",\n      children: quantityOfTimesArray.map(time => {\n        const total = numberFrom + 30 * time;\n        const hour = total / 60;\n        const stringHour = hour.toString();\n        const [hours, minutes] = stringHour.split(\".\");\n        const completeMinutes = Number(minutes) * 6;\n        let isReserved = false;\n\n        for (let appointment of appointments) {\n          if (appointment.time === `${hours}:${isNaN(completeMinutes) ? \"00\" : completeMinutes}`) {\n            isReserved = true;\n          }\n        }\n\n        if (isReserved) {\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"day-schedule-unique-reserved\",\n            children: \"Reservado\"\n          }, time, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          value: `${hours}:${isNaN(completeMinutes) ? \"00\" : completeMinutes}`,\n          className: \"day-schedule-unique\",\n          onClick: e => {\n            setAppointmentData({ ...appointmentData,\n              time: e.target.value\n            });\n          },\n          children: [hours, \":\", isNaN(completeMinutes) ? \"00\" : completeMinutes]\n        }, time, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chosenTime\",\n      children: [\"Hor\\xE1rio escolhido: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: appointmentData === null || appointmentData === void 0 ? void 0 : appointmentData.time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(DaySchedule, \"C+B8c/auQ4l6+67KOFt5BVZSox8=\", false, function () {\n  return [useShareAppointmentForm, useParams];\n});\n\n_c = DaySchedule;\nexport default DaySchedule;\n\nvar _c;\n\n$RefreshReg$(_c, \"DaySchedule\");","map":{"version":3,"sources":["C:/Projetos/Spital/web/src/components/DaySchedule/index.tsx"],"names":["useEffect","useState","useParams","useShareAppointmentForm","api","DaySchedule","getMonth","year","monthDay","appointmentData","setAppointmentData","medicSchedule","setMedicSchedule","appointments","setAppointments","id","month","completeDate","newCompleteDate","Date","newWeekDay","getDay","get","then","response","data","numberFrom","Number","from","numberTo","to","quantityOfTimes","quantityOfTimesArray","i","push","map","time","total","hour","stringHour","toString","hours","minutes","split","completeMinutes","isReserved","appointment","isNaN","e","target","value"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { useShareAppointmentForm } from \"../../context/ShareAppointmentFormProvider\";\r\nimport { ParamTypes } from \"../../components/MedicProfilePages/Main\";\r\nimport api from \"../../services/api\";\r\nimport \"./styles.css\";\r\n\r\nexport interface DayScheduleProps {\r\n  getMonth: () => number;\r\n  year: string;\r\n  monthDay: string;\r\n}\r\n\r\ninterface DateProps {\r\n  date: string;\r\n  time: string;\r\n  isOn: boolean;\r\n}\r\n\r\ninterface MedicScheduleProps {\r\n  from: string;\r\n  to: string;\r\n  week_day: number;\r\n}\r\n\r\nconst DaySchedule = ({ getMonth, year, monthDay }: DayScheduleProps) => {\r\n  const { appointmentData, setAppointmentData } = useShareAppointmentForm();\r\n  const [medicSchedule, setMedicSchedule] =\r\n    useState<MedicScheduleProps | null>(null);\r\n  const [appointments, setAppointments] = useState<DateProps[]>([]);\r\n  const { id } = useParams<ParamTypes>();\r\n\r\n  const month = getMonth();\r\n  const completeDate = `${month}/${monthDay}/${year}`;\r\n  const newCompleteDate = new Date(completeDate);\r\n  const newWeekDay = newCompleteDate.getDay();\r\n\r\n  useEffect(() => {\r\n    api\r\n      .get(`appointments?medicID=${id}&date=${completeDate}`)\r\n      .then((response: any) => {\r\n        setAppointments(response.data);\r\n      });\r\n\r\n    api\r\n      .get(`medic-schedule?medicID=${id}&week_day=${newWeekDay}`)\r\n      .then((response: any) => {\r\n        setMedicSchedule(response.data[0]);\r\n      });\r\n  }, [newWeekDay, completeDate, id]);\r\n\r\n  const numberFrom = Number(medicSchedule?.from);\r\n  const numberTo = Number(medicSchedule?.to);\r\n\r\n  const quantityOfTimes = (numberTo - numberFrom) / 30;\r\n  const quantityOfTimesArray = [];\r\n  for (let i = 0; i <= quantityOfTimes; i++) {\r\n    quantityOfTimesArray.push(i);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"day-schedule\">\r\n        {quantityOfTimesArray.map((time) => {\r\n          const total = numberFrom + 30 * time;\r\n          const hour = total / 60;\r\n          const stringHour = hour.toString();\r\n          const [hours, minutes] = stringHour.split(\".\");\r\n          const completeMinutes = Number(minutes) * 6;\r\n\r\n          let isReserved = false;\r\n\r\n          for (let appointment of appointments) {\r\n            if (\r\n              appointment.time ===\r\n              `${hours}:${isNaN(completeMinutes) ? \"00\" : completeMinutes}`\r\n            ) {\r\n              isReserved = true;\r\n            }\r\n          }\r\n\r\n          if (isReserved) {\r\n            return (\r\n              <button key={time} className=\"day-schedule-unique-reserved\">\r\n                Reservado\r\n              </button>\r\n            );\r\n          }\r\n\r\n          return (\r\n            <button\r\n              value={`${hours}:${\r\n                isNaN(completeMinutes) ? \"00\" : completeMinutes\r\n              }`}\r\n              key={time}\r\n              className=\"day-schedule-unique\"\r\n              onClick={(e: any) => {\r\n                setAppointmentData({\r\n                  ...appointmentData,\r\n                  time: e.target.value,\r\n                });\r\n              }}\r\n            >\r\n              {hours}:{isNaN(completeMinutes) ? \"00\" : completeMinutes}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"chosenTime\">\r\n        Horário escolhido: <span>{appointmentData?.time}</span>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DaySchedule;\r\n"]},"metadata":{},"sourceType":"module"}